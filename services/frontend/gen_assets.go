// Code generated by "esc -pkg frontend -o services/frontend/gen_assets.go -prefix services/frontend/web_assets services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "services/frontend/web_assets/index.html",
		size:    15114,
		modtime: 1585751360,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
