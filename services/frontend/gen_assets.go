// Code generated by "esc -pkg frontend -o services/frontend/gen_assets.go -prefix services/frontend/web_assets services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "services/frontend/web_assets/index.html",
		size:    15230,
		modtime: 1585784256,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
